/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RandomPackageDialog.java
 *
 * Created on Jul 30, 2012, 9:03:51 PM
 */
package cardmanager.gui;

import cardmanager.FileBearer;
import cardmanager.impl.CollectionOperator;
import cardmanager.impl.packages.CardDefinition;
import cardmanager.impl.packages.CountedCard;
import cardmanager.impl.packages.PackageDeffinition;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author jvanek
 */
public class RandomPackageDialog extends javax.swing.JDialog {

    SelectCardComponent selectCardComponent;
    private final CollectionOperator cv;
    private PackageDeffinition result;

    public PackageDeffinition getResult() {
        return result;
    }


    
    /** Creates new form RandomPackageDialog */
    public RandomPackageDialog(java.awt.Frame parent, boolean modal, CollectionOperator cv) {
        super(parent, modal);
        initComponents();
        this.cv=cv;
        jTextField1.setText(new Date().toString());
        jSpinner1.setModel(new SpinnerNumberModel(5, 1, 100, 1));
        jSpinner2.setModel(new SpinnerNumberModel(60, 1, 10000000, 1));
        jSpinner3.setModel(new SpinnerNumberModel(80, 1, 10000000, 1));
        selectCardComponent = new SelectCardComponent(cv.getCollectionForSelectingView());
        selectCardComponent.setPreviewAlowed(false);
        selectCardComponent.setDividerLocation(1000);
        jPanel1.add(selectCardComponent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("name of package (will be placed to collection to directory random)");

        jTextField1.setText("jTextField1");

        jLabel2.setText("max card occurence");

        jLabel3.setText("select subset of aplicable cards");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jCheckBox1.setText("allow preview (!!!)");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("generate!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("min cards in  package");

        jLabel5.setText("max cards in  package");

        jLabel6.setText("piles (one per line)");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSpinner1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSpinner2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSpinner3)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jLabel6))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jCheckBox1)
                            .addComponent(jButton1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        selectCardComponent.setPreviewAlowed(jCheckBox1.isSelected());

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (selectCardComponent.getList().getSelectedValues().length <= 0) {
            JOptionPane.showMessageDialog(this, "You must select some cards from collections as base");
            return;
        }
        if ("".equals(jCheckBox1.getText().trim())) {
            JOptionPane.showMessageDialog(this, "You must enter some name");
            return;
        }
        Object[] o = (selectCardComponent.getList().getSelectedValues());
        List<FileBearer> l = new ArrayList<FileBearer>(o.length);
        for (int i = 0; i < o.length; i++) {
            Object object = o[i];
            l.add((FileBearer) object);
        }

        result=generate(l, ((Number) jSpinner1.getValue()).intValue(), ((Number) jSpinner2.getValue()).intValue(), ((Number) jSpinner3.getValue()).intValue(), jTextField1.getText(), jTextArea1.getText().split("\n"));
        result.save();
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                RandomPackageDialog dialog = new RandomPackageDialog(new javax.swing.JFrame(), true, new CollectionOperator(0));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private PackageDeffinition generate(List<FileBearer> baser, int maxCount, int minCards, int maxCards, String name, String[] piles) {
        Random r = new Random();
        PackageDeffinition pd = PackageDeffinition.creatEmptyRandomPackageDeffinition(name);
        for (int i = 0; i < piles.length; i++) {
            String string = piles[i];
            if (string == null) {
                continue;
            }
            string = string.trim();
            if ("".equals(string)) {
                continue;
            }
            pd.getPiles().add(string);

        }
        if (minCards > maxCards) {
            return pd;
        }
        while (true) {
            if (baser.size() <= 0) {
                return pd;
            }
            if (pd.getCardCount() > maxCards) {
                int i = pd.getCards().size() - 1;
                CountedCard c=pd.getCards().get(i);
                while (pd.getCardCount() > maxCards){
                    c.setCount(c.getCount()-1);
                }
                if (c.getCount()<=0){
                    pd.getCards().remove(c);
                }
                return pd;
            }
            int i = r.nextInt(baser.size());
            FileBearer fb=baser.remove(i);
            CardDefinition cdef=new CardDefinition(fb.getFile());
            i=r.nextInt(maxCount)+1;
            CountedCard cc=new CountedCard(cdef, i);
            pd.getCards().add(cc);
            if (pd.getCardCount()>minCards){
                int q=maxCards-minCards;
                int qq=maxCards-pd.getCardCount();
                i=r.nextInt(q);
                if (i>qq){
                    return pd;
                }
            }


        }
    }
}
