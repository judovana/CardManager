package cardmanager;

import cardmanager.gui.CollectionView;
import cardmanager.impl.CollectionOperator;
import cardmanager.impl.packages.PackageDeffinition;
import cardmanager.impl.packages.PackageDeffinitionAndErrors;
import java.awt.Component;
import java.io.File;
import java.io.FileFilter;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TreeTest.java
 *
 * Created on Jul 21, 2012, 2:53:38 PM
 */
/**
 *
 * @author jvanek
 */
public class TreeTest extends javax.swing.JDialog {

    /** Creates new form TreeTest */
    public TreeTest(java.awt.Frame parent, boolean modal, File root) {
        super(parent, modal);
        initComponents();
        DefaultTreeModel t = createFileModel(root);
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.setModel(t);
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {

            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

                if (node == null) //Nothing is selected.
                {
                    return;
                }

                Object nodeInfo = node.getUserObject();
                if (node.isLeaf()) {
                    System.out.println(((File) node.getUserObject()).getAbsolutePath());
                } else {
                    System.out.println("EE");
                }

            }
        });

    }

    public static DefaultTreeModel createFileModel(File root) {
        DefaultMutableTreeNode node = creteFileTreeFromDir(root);
        DefaultTreeModel t = new DefaultTreeModel(node);
        return t;
    }
     public static DefaultTreeModel createPkgsModel(Component cparent,File root,CollectionOperator c) {
        DefaultMutableTreeNode node = cretePkgsTreeFromDir(cparent, root, c);
        DefaultTreeModel t = new DefaultTreeModel(node);
        return t;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                TreeTest dialog = new TreeTest(new javax.swing.JFrame(), true, new File("data"));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private static final DefaultMutableTreeNode creteFileTreeFromDir(File root) {
        DefaultMutableTreeNode t = new DefaultMutableTreeNode(new File(root.getAbsolutePath()){

            @Override
            public String toString() {
                return super.getName();
            }

        });
        File[] dirs = root.listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return pathname.isDirectory();
            }
        });
        for (File file : dirs) {
            t.add(creteFileTreeFromDir(file));

        }


        File[] fils = root.listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return !pathname.isDirectory();
            }
        });
        for (File file : fils) {
            t.add(new DefaultMutableTreeNode(new File(file.getAbsolutePath()) {

                @Override
                public String toString() {
                    return super.getName();
                }
            }));

        }

        return t;

    }

    private static final DefaultMutableTreeNode cretePkgsTreeFromDir(final Component cparent, File root, CollectionOperator c) {
               DefaultMutableTreeNode t = new DefaultMutableTreeNode(new File(root.getAbsolutePath()){

            @Override
            public String toString() {
                return super.getName();
            }});
        File[] dirs = root.listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return pathname.isDirectory();
            }
        });
        for (File file : dirs) {
            t.add(cretePkgsTreeFromDir(cparent, file, c));

        }


        File[] fils = root.listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return !pathname.isDirectory();
            }
        });
        for (File file : fils) {
            PackageDeffinitionAndErrors p = PackageDeffinition.createFromFileAndCollection(file, c);
            if (p.ex.size() > 0) {
                String s = "Those errors occured while loading: " + file.getAbsolutePath() + "\n\n";
                for (Exception e : p.ex) {
                    s = s + e.toString() + "\n";

                }
                JOptionPane.showMessageDialog(cparent, s);
            }


            t.add(new DefaultMutableTreeNode(p.packageDef));
        }
        return t;

    }
}
